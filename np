sender:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <mqueue.h>

#define QUEUE_NAME "/file_transfer_queue"
#define MAX_MSG_SIZE 1024

int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <file_path>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    char *file_path = argv[1];
    FILE *file = fopen(file_path, "r");
    if (file == NULL) {
        perror("Error opening file");
        exit(EXIT_FAILURE);
    }

    struct mq_attr attr;
    attr.mq_flags = 0;
    attr.mq_maxmsg = 10;
    attr.mq_msgsize = MAX_MSG_SIZE;
    attr.mq_curmsgs = 0;

    mqd_t mq = mq_open(QUEUE_NAME, O_WRONLY | O_CREAT, 0666, &attr);
    if (mq == (mqd_t)-1) {
        perror("mq_open");
        exit(EXIT_FAILURE);
    }

    char buffer[MAX_MSG_SIZE];
    ssize_t bytesRead;

    while ((bytesRead = fread(buffer, 1, MAX_MSG_SIZE, file)) > 0) {
        if (mq_send(mq, buffer, bytesRead, 0) == -1) {
            perror("mq_send");
            break;
        }
    }

    // Send an empty message to indicate the end of the file transfer
    mq_send(mq, buffer, 0, 0);

    // Wait for the receiver to acknowledge the receipt of the file
    mq_receive(mq, buffer, MAX_MSG_SIZE, NULL);

    fclose(file);
    mq_close(mq);

    return 0;
}

receiver:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <mqueue.h>

#define QUEUE_NAME "/file_transfer_queue"
#define MAX_MSG_SIZE 1024

int main(int argc, char *argv[]) {
    struct mq_attr attr;
    attr.mq_flags = 0;
    attr.mq_maxmsg = 10;
    attr.mq_msgsize = MAX_MSG_SIZE;
    attr.mq_curmsgs = 0;

    mqd_t mq = mq_open(QUEUE_NAME, O_RDONLY, 0666, &attr);
    if (mq == (mqd_t)-1) {
        perror("mq_open");
        exit(EXIT_FAILURE);
    }

    FILE *file = fopen("MQreceived_file.txt", "w");
    if (file == NULL) {
        perror("Error creating the output file");
        exit(EXIT_FAILURE);
    }

    char buffer[MAX_MSG_SIZE];
    ssize_t bytesReceived;

    while (1) {
        bytesReceived = mq_receive(mq, buffer, MAX_MSG_SIZE, NULL);
        if (bytesReceived == -1) {
            perror("mq_receive");
            break;
        }

        if (bytesReceived == 0) {
            // End of file transfer, exit the loop
            break;
        }

        fwrite(buffer, 1, bytesReceived, file);
    }

    fclose(file);
    mq_close(mq);
    mq_unlink(QUEUE_NAME); // Clean up the queue

    return 0;
}
